Microsoft (R) Macro Assembler Version 14.15.26730.0	    11/12/18 20:33:18
&Program #5    (HarvellKevin-Prog5.asm			     Page 1 - 1


				TITLE Program #5    (HarvellKevin-Prog5.asm)

				; Author: Kevin Harvell
				; Last Modified: 11/11/2018
				; OSU email address: harvellk@oregonstate.edu
				; Course number/section: CS271/400
				; Project Number: Program #5        Due Date: 11/18/18
				; Description: This program gets a user request in [10, 200], then generates that many random integers in the user
				; requested range [100, 999], storing them in consecutive elements in an array. It displays the array 10 numbers 
				; per line, then sorts in descending order, and calculates the median.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			MIN = 10
 = 000000C8			MAX = 200
 = 00000064			LO = 100
 = 000003E7			HI = 999

 00000000			.data
 00000000 00000000		request		DWORD	?
 00000004  000000C8 [		array		DWORD	MAX DUP(?)
	    00000000
	   ]
 00000324 53 6F 72 74 69	intro_1		BYTE	"Sorting Random Integers		Programmed by Kevin Harvell", 0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 09 09
	   50 72 6F 67 72
	   61 6D 6D 65 64
	   20 62 79 20 4B
	   65 76 69 6E 20
	   48 61 72 76 65
	   6C 6C 00
 00000359 54 68 69 73 20	intro_2		BYTE	"This program generates random numbers in the range [100 .. 999]", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 00
 00000399 64 69 73 70 6C	intro_3		BYTE	"displays the original list, sorts the list, and calculates the", 0
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 00
 000003D8 6D 65 64 69 61	intro_4		BYTE	"median value. Finally, it displays the list sorted in descending order.", 0
	   6E 20 76 61 6C
	   75 65 2E 20 46
	   69 6E 61 6C 6C
	   79 2C 20 69 74
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 00
 00000420 48 6F 77 20 6D	prompt_1	BYTE	"How many numbers should be generated? [10 .. 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 20 2E 2E 20
	   32 30 30 5D 3A
	   20 00
 00000454 49 6E 76 61 6C	inpErr		BYTE	"Invalid Input", 0
	   69 64 20 49 6E
	   70 75 74 00
 00000462 54 68 65 20 75	results_1	BYTE	"The unsorted random numbers: ", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 20 00
 00000480 54 68 65 20 6D	results_2	BYTE	"The median is ", 0
	   65 64 69 61 6E
	   20 69 73 20 00
 0000048F 54 68 65 20 73	results_3	BYTE	"The sorted list: ", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 20 00
 000004A1 09 00			spcBuff		BYTE	"	", 0

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call	Randomize					;seed random numbers

 00000005  68 00000324 R		push	OFFSET intro_1				;push introduction strings onto stack
 0000000A  68 00000359 R		push	OFFSET intro_2
 0000000F  68 00000399 R		push	OFFSET intro_3
 00000014  68 000003D8 R		push	OFFSET intro_4
 00000019  E8 0000007A			call	introduction

 0000001E  68 00000000 R		push	OFFSET request
 00000023  E8 000000B0			call	getData

 00000028  68 00000004 R		push	OFFSET array				;fill array with random numbers
 0000002D  FF 35 00000000 R		push	request
 00000033  E8 000000DF			call	fillArray

 00000038  68 00000462 R		push	OFFSET results_1			;display array contents after filled
 0000003D  68 000004A1 R		push	OFFSET spcBuff				
 00000042  68 00000004 R		push	OFFSET array				
 00000047  FF 35 00000000 R		push	request
 0000004D  E8 000000EA			call	displayList

 00000052  68 00000004 R		push	OFFSET array				;sort the array using bubble sort
 00000057  FF 35 00000000 R		push	request
 0000005D  E8 00000129			call	sortList
					
 00000062  68 00000480 R		push	OFFSET results_2			;find the median of sorted array
 00000067  68 00000004 R		push	OFFSET array				
 0000006C  FF 35 00000000 R		push	request
 00000072  E8 00000149			call	displayMedian

 00000077  68 0000048F R		push	OFFSET results_3			;display array contents after sorted
 0000007C  68 000004A1 R		push	OFFSET spcBuff				
 00000081  68 00000004 R		push	OFFSET array				
 00000086  FF 35 00000000 R		push	request
 0000008C  E8 000000AB			call	displayList

					exit	; exit to operating system
 00000091  6A 00	   *	    push   +000000000h
 00000093  E8 00000000 E   *	    call   ExitProcess
 00000098			main ENDP

				;--------------------------------------------------------------------------------------------
				;introduction
				;Introduces Program and Programmer
				;Receives: @intro_1, @intro_2, @intro_3, @intro_4
				;Returns: N/A
				;--------------------------------------------------------------------------------------------
 00000098			introduction PROC
 00000098  55				push	ebp
 00000099  8B EC			mov		ebp, esp
 0000009B  8B 55 14			mov		edx, [ebp + 20]
 0000009E  E8 00000000 E		call	WriteString
 000000A3  E8 00000000 E		call	CrLf
 000000A8  8B 55 10			mov		edx, [ebp + 16]
 000000AB  E8 00000000 E		call	WriteString
 000000B0  E8 00000000 E		call	CrLf
 000000B5  8B 55 0C			mov		edx, [ebp + 12]
 000000B8  E8 00000000 E		call	WriteString
 000000BD  E8 00000000 E		call	CrLf
 000000C2  8B 55 08			mov		edx, [ebp + 8]
 000000C5  E8 00000000 E		call	WriteString
 000000CA  E8 00000000 E		call	CrLf
 000000CF  E8 00000000 E		call	CrLf
 000000D4  5D				pop		ebp
 000000D5  C2 0010			ret		16
 000000D8			introduction ENDP

				;--------------------------------------------------------------------------------------------
				;getData
				;Gets a user request in the range [10, 200]
				;Receives: @request
				;Returns: N/A
				;--------------------------------------------------------------------------------------------
 000000D8			getData PROC
 000000D8  55				push	ebp
 000000D9  8B EC			mov		ebp, esp
 000000DB  8B 5D 08			mov		ebx, [ebp + 8]				;set ebx = @request
 000000DE			tryAgain:
 000000DE  BA 00000420 R		mov		edx, OFFSET prompt_1
 000000E3  E8 00000000 E		call	WriteString					;ask for number of integers for array
 000000E8  E8 00000000 E		call	ReadInt
 000000ED  83 F8 0A			cmp		eax, MIN
 000000F0  7C 09			jl		invalid
 000000F2  3D 000000C8			cmp		eax, MAX
 000000F7  7F 02			jg		invalid
 000000F9  EB 11			jmp		inputGood

 000000FB			invalid:
 000000FB  BA 00000454 R		mov		edx, OFFSET inpErr
 00000100  E8 00000000 E		call	WriteString
 00000105  E8 00000000 E		call	CrLf
 0000010A  EB D2			jmp		tryAgain

 0000010C			inputGood:
 0000010C  89 03			mov		[ebx], eax					;set request = input
 0000010E  E8 00000000 E		call	CrLf
 00000113  5D				pop		ebp
 00000114  C2 0004			ret 4
 00000117			getData ENDP


				;--------------------------------------------------------------------------------------------
				;fillArray
				;Fills the array with random numbers [lo, hi]
				;Code borrowed and modified from Lecture 19 video
				;Receives: request, @array
				;Returns: N/A
				;--------------------------------------------------------------------------------------------
 00000117			fillArray PROC
 00000117  55				push	ebp
 00000118  8B EC			mov		ebp, esp
 0000011A  8B 7D 0C			mov		edi, [ebp + 12]				;@array in edi
 0000011D  8B 4D 08			mov		ecx, [ebp + 8]				;value of request in ecx
 00000120			more1:
 00000120  B8 000003E7			mov		eax, hi
 00000125  83 E8 64			sub		eax, lo
 00000128  40				inc		eax
 00000129  E8 00000000 E		call	RandomRange
 0000012E  83 C0 64			add		eax, lo
 00000131  89 07			mov		[edi], eax
 00000133  83 C7 04			add		edi, 4
 00000136  E2 E8			loop	more1

 00000138  5D				pop		ebp
 00000139  C2 0008			ret 8
 0000013C			fillArray ENDP

				;--------------------------------------------------------------------------------------------
				;displayList
				;Displays the contents of an array 10 per line
				;Code borrowed from Lecture 20 video
				;Receives: @array, request, @results_1/@results_2(to display title), @spcBuff
				;Returns: N/A
				;--------------------------------------------------------------------------------------------
 0000013C			displayList PROC
 0000013C  55				push	ebp
 0000013D  8B EC			mov		ebp, esp
 0000013F  BB 00000000			mov		ebx, 0						;counter for 10 numbers per line
 00000144  8B 75 0C			mov		esi, [ebp + 12]				;@array in esi
 00000147  8B 4D 08			mov		ecx, [ebp + 8]				;value of request in ecx
 0000014A  8B 55 14			mov		edx, [ebp + 20]				;display title for list of data
 0000014D  E8 00000000 E		call	WriteString
 00000152  E8 00000000 E		call	CrLf
 00000157  8B 55 10			mov		edx, [ebp + 16]				;move space buffer into edx to space numbers
 0000015A			more2:
 0000015A  8B 06			mov		eax, [esi]					;get current element
 0000015C  E8 00000000 E		call	WriteDec
 00000161  E8 00000000 E		call	WriteString
 00000166  43				inc		ebx
 00000167  83 FB 0A			cmp		ebx, 10
 0000016A  74 02			je		newLine
 0000016C  EB 0A			jmp		continue
 0000016E			newLine:
 0000016E  BB 00000000			mov		ebx, 0						;reset counter to 0
 00000173  E8 00000000 E		call	Crlf
 00000178			continue:
 00000178  83 C6 04			add		esi, 4						;next element
 0000017B  E2 DD			loop	more2
 0000017D			endMore:
 0000017D  E8 00000000 E		call	CrLf
 00000182  E8 00000000 E		call	CrLf
 00000187  5D				pop		ebp
 00000188  C2 0010			ret 16
 0000018B			displayList ENDP

				;--------------------------------------------------------------------------------------------
				;sortList
				;Sorts list using a bubble sort
				;Code borrowed from Kip Irvine - Assembly Language for x86 Processors
				;Receives: @array, request
				;Returns: N/A
				;--------------------------------------------------------------------------------------------
 0000018B			sortList PROC
 0000018B  55				push	ebp
 0000018C  8B EC			mov		ebp, esp
 0000018E  8B 4D 08			mov		ecx, [ebp + 8]				;value of request in ecx
 00000191  49				dec		ecx							;decrement request by 1
 00000192			L1:
 00000192  51				push	ecx
 00000193  8B 75 0C			mov		esi, [ebp + 12]				;point to first value of array
 00000196			L2:
 00000196  8B 06			mov		eax, [esi]					;get array value
 00000198  39 46 04			cmp		[esi + 4], eax				;compare a pair of values
 0000019B  7C 06			jl		L3							;if [ESI] >= [ESI + 4], no exchange
 0000019D  56				push	esi
 0000019E  E8 0000000C			call	exchange
 000001A3			L3:
 000001A3  83 C6 04			add		esi, 4						;move both pointers forward
 000001A6  E2 EE			loop	L2							;inner loop

 000001A8  59				pop		ecx							;retrieve outer loop count
 000001A9  E2 E7			loop	L1							;else repeat outer loop
 000001AB			L4:
 000001AB  5D				pop		ebp
 000001AC  C2 0008			ret 8
 000001AF			sortList ENDP

				;--------------------------------------------------------------------------------------------
				;exchange
				;Exchanges two numbers
				;Code borrowed from Kip Irvine - Assembly Language for x86 Processors
				;Receives: esi
				;Returns: N/A
				;--------------------------------------------------------------------------------------------
 000001AF			exchange PROC
 000001AF  55				push	ebp
 000001B0  8B EC			mov		ebp, esp
 000001B2  8B 75 08			mov		esi, [ebp + 8]				;move pointer to array value into esi
 000001B5  8B 06			mov		eax, [esi]					;get array value
 000001B7  87 46 04			xchg	eax, [esi + 4]				;exchange the pair
 000001BA  89 06			mov		[esi], eax
 000001BC  5D				pop		ebp
 000001BD  C2 0004			ret		4
 000001C0			exchange ENDP


				;--------------------------------------------------------------------------------------------
				;displayMedian
				;Find and displays the median of the array
				;Receives: @array, request, @results_2(to display title)
				;Returns: N/A
				;--------------------------------------------------------------------------------------------
 000001C0			displayMedian PROC
 000001C0  55				push	ebp
 000001C1  8B EC			mov		ebp, esp
 000001C3  8B 55 10			mov		edx, [ebp + 16]				;display "the median is" text
 000001C6  E8 00000000 E		call	WriteString

 000001CB  8B 45 08			mov		eax, [ebp + 8]				;move count into eax for division by 2 to check even/odd
 000001CE  BA 00000000			mov		edx, 0
 000001D3  BB 00000002			mov		ebx, 2
 000001D8  F7 F3			div		ebx
 000001DA  83 FA 00			cmp		edx, 0
 000001DD  74 02			je		isEven
 000001DF  EB 2D			jmp		isOdd
 000001E1			isEven:
 000001E1  83 E8 01			sub		eax, 1						;subtract 1 from the quotient to get the zero-indexed ele
 000001E4  BB 00000004			mov		ebx, 4						;multiply quotient by DWORD byte size of 4
 000001E9  F7 E3			mul		ebx
 000001EB  8B 75 0C			mov		esi, [ebp + 12]				;point to first value of array
 000001EE  03 F0			add		esi, eax					;find the first middle element
 000001F0  8B 06			mov		eax, [esi]
 000001F2  03 46 04			add		eax, [esi + 4]				;add two middle numbers together for average
 000001F5  BA 00000000			mov		edx, 0						;rounding
 000001FA  BB 00000002			mov		ebx, 2
 000001FF  F7 F3			div		ebx
 00000201  83 FA 00			cmp		edx, 0
 00000204  74 01			je		writeNum
 00000206  40				inc		eax							;round up
 00000207			writeNum:
 00000207  E8 00000000 E		call	WriteDec					;write the median
 0000020C  EB 13			jmp		medianFound
 0000020E			isOdd:
 0000020E  BB 00000004			mov		ebx, 4						;multiply quotient by DWORD byte size of 4
 00000213  F7 E3			mul		ebx
 00000215  8B 75 0C			mov		esi, [ebp + 12]				;point to first value of array
 00000218  03 F0			add		esi, eax					;find the median element
 0000021A  8B 06			mov		eax, [esi]					;write the median
 0000021C  E8 00000000 E		call	WriteDec
 00000221			medianFound:
 00000221  E8 00000000 E		call	CrLf
 00000226  E8 00000000 E		call	CrLf
 0000022B  5D				pop		ebp
 0000022C  C2 000C			ret 12
 0000022F			displayMedian ENDP

				END main
Microsoft (R) Macro Assembler Version 14.15.26730.0	    11/12/18 20:33:18
&Program #5    (HarvellKevin-Prog5.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004A3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000022F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 0000013C _TEXT	Length= 0000004F Public STDCALL
  more2  . . . . . . . . . . . .	L Near	 0000015A _TEXT	
  newLine  . . . . . . . . . . .	L Near	 0000016E _TEXT	
  continue . . . . . . . . . . .	L Near	 00000178 _TEXT	
  endMore  . . . . . . . . . . .	L Near	 0000017D _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001C0 _TEXT	Length= 0000006F Public STDCALL
  isEven . . . . . . . . . . . .	L Near	 000001E1 _TEXT	
  writeNum . . . . . . . . . . .	L Near	 00000207 _TEXT	
  isOdd  . . . . . . . . . . . .	L Near	 0000020E _TEXT	
  medianFound  . . . . . . . . .	L Near	 00000221 _TEXT	
exchange . . . . . . . . . . . .	P Near	 000001AF _TEXT	Length= 00000011 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000117 _TEXT	Length= 00000025 Public STDCALL
  more1  . . . . . . . . . . . .	L Near	 00000120 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000D8 _TEXT	Length= 0000003F Public STDCALL
  tryAgain . . . . . . . . . . .	L Near	 000000DE _TEXT	
  invalid  . . . . . . . . . . .	L Near	 000000FB _TEXT	
  inputGood  . . . . . . . . . .	L Near	 0000010C _TEXT	
introduction . . . . . . . . . .	P Near	 00000098 _TEXT	Length= 00000040 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000098 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 0000018B _TEXT	Length= 00000024 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000192 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000196 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000001A3 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 000001AB _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000004 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inpErr . . . . . . . . . . . . .	Byte	 00000454 _DATA	
intro_1  . . . . . . . . . . . .	Byte	 00000324 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000359 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 00000399 _DATA	
intro_4  . . . . . . . . . . . .	Byte	 000003D8 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt_1 . . . . . . . . . . . .	Byte	 00000420 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
request  . . . . . . . . . . . .	DWord	 00000000 _DATA	
results_1  . . . . . . . . . . .	Byte	 00000462 _DATA	
results_2  . . . . . . . . . . .	Byte	 00000480 _DATA	
results_3  . . . . . . . . . . .	Byte	 0000048F _DATA	
spcBuff  . . . . . . . . . . . .	Byte	 000004A1 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
