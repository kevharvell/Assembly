Microsoft (R) Macro Assembler Version 14.15.26730.0	    10/02/18 20:29:29
+Programming Assignment #1   (Project01.asm		     Page 1 - 1


				TITLE Programming Assignment #1   (Project01.asm)

				; Author: Kevin Harvell
				; Last Modified: 9/27/2018
				; OSU email address: harvellk@oregonstate.edu
				; Course number/section: CS340/400
				; Project Number: Project #1       Due Date: 10/7/2018
				; Description: This program displays my name and program title, prompts user for 2 numbers and
				;	and calculates the sum, difference, product, (integer) quotient and remainder of the numbers, then
				;	displays a terminating message.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000001			START = 1
 = 00000002			QUIT = 2

 00000000			.data
 00000000 00000000		choice			DWORD	?		;play or quit as an integer
 00000004 00000000		num1			DWORD	?		;first integer entered by user
 00000008 00000000		num2			DWORD	?		;second integer entered by user
 0000000C 00000000		sum				DWORD	?		
 00000010 00000000		difference		DWORD	?
 00000014 00000000		product			DWORD	?
 00000018 00000000		quotient		DWORD	?
 0000001C 00000000		remainder		DWORD	?
 00000020 00000000		lastNum			DWORD	?
 00000024 0000000A		ten				DWORD	10
 00000028 00000005		round			DWORD	5
 0000002C 45 6C 65 6D 65	intro_1			BYTE	"Elementary Arithmetic by Kevin Harvell", 0
	   6E 74 61 72 79
	   20 41 72 69 74
	   68 6D 65 74 69
	   63 20 62 79 20
	   4B 65 76 69 6E
	   20 48 61 72 76
	   65 6C 6C 00
 00000053 2A 2A 45 43 31	ec1				BYTE	"**EC1: Program repeats until user chooses to quit.", 0
	   3A 20 50 72 6F
	   67 72 61 6D 20
	   72 65 70 65 61
	   74 73 20 75 6E
	   74 69 6C 20 75
	   73 65 72 20 63
	   68 6F 6F 73 65
	   73 20 74 6F 20
	   71 75 69 74 2E
	   00
 00000086 2A 2A 45 43 32	ec2				BYTE	"**EC2: Program verifies second number is less than first.", 0
	   3A 20 50 72 6F
	   67 72 61 6D 20
	   76 65 72 69 66
	   69 65 73 20 73
	   65 63 6F 6E 64
	   20 6E 75 6D 62
	   65 72 20 69 73
	   20 6C 65 73 73
	   20 74 68 61 6E
	   20 66 69 72 73
	   74 2E 00
 000000C0 2A 2A 45 43 33	ec3				BYTE	"**EC3: Program displays qutient as a floating-point number, rounded to the nearest .001", 0
	   3A 20 50 72 6F
	   67 72 61 6D 20
	   64 69 73 70 6C
	   61 79 73 20 71
	   75 74 69 65 6E
	   74 20 61 73 20
	   61 20 66 6C 6F
	   61 74 69 6E 67
	   2D 70 6F 69 6E
	   74 20 6E 75 6D
	   62 65 72 2C 20
	   72 6F 75 6E 64
	   65 64 20 74 6F
	   20 74 68 65 20
	   6E 65 61 72 65
	   73 74 20 2E 30
	   30 31 00
 00000118 31 2E 20 53 74	start_prompt	BYTE	"1. Start", 0
	   61 72 74 00
 00000121 32 2E 20 51 75	quit_prompt		BYTE	"2. Quit", 0
	   69 74 00
 00000129 45 6E 74 65 72	intro_2			BYTE	"Enter 2 integers, and I'll show you the sum, difference, product, quotient and remainder.", 0
	   20 32 20 69 6E
	   74 65 67 65 72
	   73 2C 20 61 6E
	   64 20 49 27 6C
	   6C 20 73 68 6F
	   77 20 79 6F 75
	   20 74 68 65 20
	   73 75 6D 2C 20
	   64 69 66 66 65
	   72 65 6E 63 65
	   2C 20 70 72 6F
	   64 75 63 74 2C
	   20 71 75 6F 74
	   69 65 6E 74 20
	   61 6E 64 20 72
	   65 6D 61 69 6E
	   64 65 72 2E 00
 00000183 46 69 72 73 74	prompt_1		BYTE	"First number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 00000192 53 65 63 6F 6E	prompt_2		BYTE	"Second number: ", 0
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 000001A2 20 2B 20 00		result_sum		BYTE	" + ", 0
 000001A6 20 2D 20 00		result_diff		BYTE	" - ", 0
 000001AA 20 78 20 00		result_prod		BYTE	" x ", 0
 000001AE 20 2F 20 00		result_div		BYTE	" / ", 0
 000001B2 20 72 65 6D 61	result_rem		BYTE	" remainder ", 0
	   69 6E 64 65 72
	   20 00
 000001BE 20 3D 20 00		result_eq		BYTE	" = ", 0
 000001C2 2E 00			decimal			BYTE	".", 0
 000001C4 49 6D 70 72 65	goodBye			BYTE	"Impressed? Bye!", 0
	   73 73 65 64 3F
	   20 42 79 65 21
	   00
 000001D4 49 6E 76 61 6C	invalid_input	BYTE	"Invalid Input. Try Again.", 0
	   69 64 20 49 6E
	   70 75 74 2E 20
	   54 72 79 20 41
	   67 61 69 6E 2E
	   00
 000001EE 50 6C 65 61 73	invalid_nums	BYTE	"Please make sure the second number is less than the first.", 0
	   65 20 6D 61 6B
	   65 20 73 75 72
	   65 20 74 68 65
	   20 73 65 63 6F
	   6E 64 20 6E 75
	   6D 62 65 72 20
	   69 73 20 6C 65
	   73 73 20 74 68
	   61 6E 20 74 68
	   65 20 66 69 72
	   73 74 2E 00

 00000000			.code
 00000000			main PROC

 00000000			start_menu:
				;Introduce programmer and program title
 00000000  E8 00000000 E		call	CrLf
 00000005  BA 0000002C R		mov		edx, OFFSET intro_1
 0000000A  E8 00000000 E		call	WriteString
 0000000F  E8 00000000 E		call	CrLf
 00000014  BA 00000053 R		mov		edx, OFFSET ec1
 00000019  E8 00000000 E		call	WriteString
 0000001E  E8 00000000 E		call	CrLf
 00000023  BA 00000086 R		mov		edx, OFFSET ec2
 00000028  E8 00000000 E		call	WriteString
 0000002D  E8 00000000 E		call	CrLf
 00000032  BA 000000C0 R		mov		edx, OFFSET ec3
 00000037  E8 00000000 E		call	WriteString
 0000003C  E8 00000000 E		call	CrLf

				;Display menu to start or quit
 00000041  BA 00000118 R		mov		edx, OFFSET start_prompt
 00000046  E8 00000000 E		call	WriteString
 0000004B  E8 00000000 E		call	CrLf
 00000050  BA 00000121 R		mov		edx, OFFSET quit_prompt
 00000055  E8 00000000 E		call	WriteString
 0000005A  E8 00000000 E		call	CrLf

				;Get choice from user to start or quit
 0000005F  E8 00000000 E		call	ReadInt
 00000064  A3 00000000 R		mov		choice, eax

				;start loop if user selects start
 00000069  A1 00000000 R		mov		eax, choice
 0000006E  83 F8 01			cmp		eax, START
 00000071  74 1D			je		startLoop
 00000073  83 F8 02			cmp		eax, QUIT
 00000076  0F 84 00000289		je		end_program
 0000007C  BA 000001D4 R		mov		edx, OFFSET invalid_input
 00000081  E8 00000000 E		call	WriteString
 00000086  E8 00000000 E		call	CrLf
 0000008B  E9 FFFFFF70			jmp		start_menu

 00000090			startLoop:
				;Display instructions
 00000090  E8 00000000 E		call	CrLf
 00000095  BA 00000129 R		mov		edx, OFFSET intro_2
 0000009A  E8 00000000 E		call	WriteString
 0000009F  E8 00000000 E		call	CrLf

 000000A4			getNumbers:
				;Get 2 numbers
 000000A4  E8 00000000 E		call	CrLf
 000000A9  BA 00000183 R		mov		edx, OFFSET prompt_1
 000000AE  E8 00000000 E		call	WriteString
 000000B3  E8 00000000 E		call	ReadInt
 000000B8  A3 00000004 R		mov		num1, eax
 000000BD  BA 00000192 R		mov		edx, OFFSET prompt_2
 000000C2  E8 00000000 E		call	WriteString
 000000C7  E8 00000000 E		call	ReadInt
 000000CC  A3 00000008 R		mov		num2, eax
				;Validate second number is less than first
 000000D1  A1 00000004 R		mov		eax, num1
 000000D6  3B 05 00000008 R		cmp		eax, num2
 000000DC  76 02			jbe		invalidNums
 000000DE  EB 11			jmp		calculate

 000000E0			invalidNums:
 000000E0  BA 000001EE R		mov		edx, OFFSET invalid_nums
 000000E5  E8 00000000 E		call	WriteString
 000000EA  E8 00000000 E		call	CrLf
 000000EF  EB B3			jmp		getNumbers

 000000F1			calculate:
				;Calculate sum
 000000F1  A1 00000004 R		mov		eax, num1
 000000F6  03 05 00000008 R		add		eax, num2
 000000FC  A3 0000000C R		mov		sum, eax

				;Calculate difference
 00000101  A1 00000004 R		mov		eax, num1
 00000106  2B 05 00000008 R		sub		eax, num2
 0000010C  A3 00000010 R		mov		difference, eax

				;Calculate product
 00000111  A1 00000004 R		mov		eax, num1
 00000116  F7 25 00000008 R		mul		num2
 0000011C  A3 00000014 R		mov		product, eax

				;Calculate (integer) quotient and remainder
 00000121  A1 00000004 R		mov		eax, num1
 00000126  F7 35 00000008 R		div		num2
 0000012C  A3 00000018 R		mov		quotient, eax
 00000131  89 15 0000001C R		mov		remainder, edx

				;Display the results
				;sum results
 00000137  E8 00000000 E		call	CrLf
 0000013C  A1 00000004 R		mov		eax, num1
 00000141  E8 00000000 E		call	WriteDec
 00000146  BA 000001A2 R		mov		edx, OFFSET result_sum
 0000014B  E8 00000000 E		call	WriteString
 00000150  A1 00000008 R		mov		eax, num2
 00000155  E8 00000000 E		call	WriteDec
 0000015A  BA 000001BE R		mov		edx, OFFSET result_eq
 0000015F  E8 00000000 E		call	WriteString
 00000164  A1 0000000C R		mov		eax, sum
 00000169  E8 00000000 E		call	WriteDec
 0000016E  E8 00000000 E		call	CrLf
				;difference results
 00000173  A1 00000004 R		mov		eax, num1
 00000178  E8 00000000 E		call	WriteDec
 0000017D  BA 000001A6 R		mov		edx, OFFSET result_diff
 00000182  E8 00000000 E		call	WriteString
 00000187  A1 00000008 R		mov		eax, num2
 0000018C  E8 00000000 E		call	WriteDec
 00000191  BA 000001BE R		mov		edx, OFFSET result_eq
 00000196  E8 00000000 E		call	WriteString
 0000019B  A1 00000010 R		mov		eax, difference
 000001A0  E8 00000000 E		call	WriteDec
 000001A5  E8 00000000 E		call	CrLf
				;product results
 000001AA  A1 00000004 R		mov		eax, num1
 000001AF  E8 00000000 E		call	WriteDec
 000001B4  BA 000001AA R		mov		edx, OFFSET result_prod
 000001B9  E8 00000000 E		call	WriteString
 000001BE  A1 00000008 R		mov		eax, num2
 000001C3  E8 00000000 E		call	WriteDec
 000001C8  BA 000001BE R		mov		edx, OFFSET result_eq
 000001CD  E8 00000000 E		call	WriteString
 000001D2  A1 00000014 R		mov		eax, product
 000001D7  E8 00000000 E		call	WriteDec
 000001DC  E8 00000000 E		call	CrLf
				;quotient/remainder results (int)
 000001E1  A1 00000004 R		mov		eax, num1
 000001E6  E8 00000000 E		call	WriteDec
 000001EB  BA 000001AE R		mov		edx, OFFSET result_div
 000001F0  E8 00000000 E		call	WriteString
 000001F5  A1 00000008 R		mov		eax, num2
 000001FA  E8 00000000 E		call	WriteDec
 000001FF  BA 000001BE R		mov		edx, OFFSET result_eq
 00000204  E8 00000000 E		call	WriteString
 00000209  A1 00000018 R		mov		eax, quotient
 0000020E  E8 00000000 E		call	WriteDec
 00000213  BA 000001B2 R		mov		edx, OFFSET result_rem
 00000218  E8 00000000 E		call	WriteString
 0000021D  A1 0000001C R		mov		eax, remainder
 00000222  E8 00000000 E		call	WriteDec
 00000227  E8 00000000 E		call	CrLf
				;quotient calculations and results(float)
 0000022C  A1 00000004 R		mov		eax, num1					;display problem set up
 00000231  E8 00000000 E		call	WriteDec
 00000236  BA 000001AE R		mov		edx, OFFSET result_div
 0000023B  E8 00000000 E		call	WriteString
 00000240  A1 00000008 R		mov		eax, num2
 00000245  E8 00000000 E		call	WriteDec
 0000024A  BA 000001BE R		mov		edx, OFFSET result_eq
 0000024F  E8 00000000 E		call	WriteString
 00000254  A1 00000018 R		mov		eax, quotient				;display quotient w/o decimal
 00000259  E8 00000000 E		call	WriteDec
 0000025E  BA 000001C2 R		mov		edx, OFFSET decimal
 00000263  E8 00000000 E		call	WriteString
 00000268  A1 0000001C R		mov		eax, remainder
 0000026D  F7 25 00000024 R		mul		ten
 00000273  F7 35 00000008 R		div		num2						;tenth
 00000279  A3 00000018 R		mov		quotient, eax
 0000027E  E8 00000000 E		call	WriteDec
 00000283  89 15 0000001C R		mov		remainder, edx
 00000289  A1 0000001C R		mov		eax, remainder
 0000028E  F7 25 00000024 R		mul		ten		
 00000294  F7 35 00000008 R		div		num2						;hundredth
 0000029A  A3 00000018 R		mov		quotient, eax
 0000029F  E8 00000000 E		call	WriteDec
 000002A4  89 15 0000001C R		mov		remainder, edx
 000002AA  A1 0000001C R		mov		eax, remainder	
 000002AF  F7 25 00000024 R		mul		ten		
 000002B5  F7 35 00000008 R		div		num2						;thousandth
 000002BB  A3 00000020 R		mov		lastNum, eax
 000002C0  89 15 0000001C R		mov		remainder, edx
 000002C6  A1 0000001C R		mov		eax, remainder	
 000002CB  F7 25 00000024 R		mul		ten		
 000002D1  F7 35 00000008 R		div		num2						;ten-thousandth
 000002D7  A3 00000018 R		mov		quotient, eax
 000002DC  3B 05 00000028 R		cmp		eax, round					;rounding
 000002E2  7D 0C			jge		roundUp
 000002E4  A1 00000020 R		mov		eax, lastNum
 000002E9  E8 00000000 E		call	WriteDec
 000002EE  EB 0B			jmp		skipRound
 000002F0			roundUp:
 000002F0  A1 00000020 R		mov		eax, lastNum
 000002F5  40				inc		eax
 000002F6  E8 00000000 E		call	WriteDec
 000002FB			skipRound:
 000002FB  E8 00000000 E		call	CrLf


				;repeat program
 00000300  E9 FFFFFCFB			jmp start_menu

 00000305			end_program:
				;Say "Goodbye"
 00000305  E8 00000000 E		call	CrLf
 0000030A  BA 000001C4 R		mov		edx, OFFSET goodBye
 0000030F  E8 00000000 E		call	WriteString
 00000314  E8 00000000 E		call	CrLf

					exit	; exit to operating system
 00000319  6A 00	   *	    push   +000000000h
 0000031B  E8 00000000 E   *	    call   ExitProcess
 00000320			main ENDP

				; (insert additional procedures here)

				END main
Microsoft (R) Macro Assembler Version 14.15.26730.0	    10/02/18 20:29:29
+Programming Assignment #1   (Project01.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000229 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000320 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000320 Public STDCALL
  start_menu . . . . . . . . . .	L Near	 00000000 _TEXT	
  startLoop  . . . . . . . . . .	L Near	 00000090 _TEXT	
  getNumbers . . . . . . . . . .	L Near	 000000A4 _TEXT	
  invalidNums  . . . . . . . . .	L Near	 000000E0 _TEXT	
  calculate  . . . . . . . . . .	L Near	 000000F1 _TEXT	
  roundUp  . . . . . . . . . . .	L Near	 000002F0 _TEXT	
  skipRound  . . . . . . . . . .	L Near	 000002FB _TEXT	
  end_program  . . . . . . . . .	L Near	 00000305 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
QUIT . . . . . . . . . . . . . .	Number	 00000002h   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
START  . . . . . . . . . . . . .	Number	 00000001h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
choice . . . . . . . . . . . . .	DWord	 00000000 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
decimal  . . . . . . . . . . . .	Byte	 000001C2 _DATA	
difference . . . . . . . . . . .	DWord	 00000010 _DATA	
ec1  . . . . . . . . . . . . . .	Byte	 00000053 _DATA	
ec2  . . . . . . . . . . . . . .	Byte	 00000086 _DATA	
ec3  . . . . . . . . . . . . . .	Byte	 000000C0 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodBye  . . . . . . . . . . . .	Byte	 000001C4 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 0000002C _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000129 _DATA	
invalid_input  . . . . . . . . .	Byte	 000001D4 _DATA	
invalid_nums . . . . . . . . . .	Byte	 000001EE _DATA	
lastNum  . . . . . . . . . . . .	DWord	 00000020 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num1 . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
num2 . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
product  . . . . . . . . . . . .	DWord	 00000014 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 00000183 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000192 _DATA	
quit_prompt  . . . . . . . . . .	Byte	 00000121 _DATA	
quotient . . . . . . . . . . . .	DWord	 00000018 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder  . . . . . . . . . . .	DWord	 0000001C _DATA	
result_diff  . . . . . . . . . .	Byte	 000001A6 _DATA	
result_div . . . . . . . . . . .	Byte	 000001AE _DATA	
result_eq  . . . . . . . . . . .	Byte	 000001BE _DATA	
result_prod  . . . . . . . . . .	Byte	 000001AA _DATA	
result_rem . . . . . . . . . . .	Byte	 000001B2 _DATA	
result_sum . . . . . . . . . . .	Byte	 000001A2 _DATA	
round  . . . . . . . . . . . . .	DWord	 00000028 _DATA	
start_prompt . . . . . . . . . .	Byte	 00000118 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000000C _DATA	
ten  . . . . . . . . . . . . . .	DWord	 00000024 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
